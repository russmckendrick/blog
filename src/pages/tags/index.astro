---
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import { getTagMetadata, getTagUrl, normalizeTagSlug } from '../../utils/tags';

// Get all blog posts and count tags
const posts = (await getCollection('blog')).filter(post => !post.data.draft);

// Count posts per tag (normalize to lowercase with hyphens)
const tagCounts = new Map<string, number>();
posts.forEach(post => {
  const tags = post.data.tags || [];
  tags.forEach(tag => {
    const normalizedTag = normalizeTagSlug(tag);
    tagCounts.set(normalizedTag, (tagCounts.get(normalizedTag) || 0) + 1);
  });
});

// Convert to array and sort alphabetically by title
const sortedTags = Array.from(tagCounts.entries())
  .map(([slug, count]) => ({
    slug,
    count,
    metadata: getTagMetadata(slug)
  }))
  .sort((a, b) => a.metadata.title.localeCompare(b.metadata.title));

// Calculate size classes based on post count
function getTagSizeClass(count: number, max: number): string {
  const ratio = count / max;
  if (ratio >= 0.7) return 'text-2xl md:text-3xl';
  if (ratio >= 0.5) return 'text-xl md:text-2xl';
  if (ratio >= 0.35) return 'text-lg md:text-xl';
  if (ratio >= 0.2) return 'text-base md:text-lg';
  return 'text-sm md:text-base';
}

const maxCount = sortedTags[0]?.count || 1;
---

<BaseLayout
  title="Post tags üè∑Ô∏è"
  description="Browse all tags and topics covered on this blog"
>
  <section class="text-center py-8 pb-12 mb-8 border-b border-gray-200 dark:border-gray-700">
    <h1 class="text-4xl lg:text-5xl font-bold mb-4 text-gray-900 dark:text-gray-100">
      Post tags üè∑Ô∏è
    </h1>
    <p class="text-lg text-gray-600 dark:text-gray-400 max-w-2xl mx-auto">
      Explore {sortedTags.length} topics with {posts.length} posts
    </p>
  </section>

  <section class="max-w-6xl mx-auto px-5 py-12">
    <div id="tags-container" class="flex flex-wrap justify-center items-center gap-6 md:gap-8 lg:gap-10">
      {sortedTags.map((tag, index) => {
        const sizeClass = getTagSizeClass(tag.count, maxCount);
        const colorClasses = `${tag.metadata.colorLight} ${tag.metadata.colorDark}`;

        return (
          <a
            href={getTagUrl(tag.slug)}
            data-tag-index={index}
            class={`tag-item ${sizeClass} ${colorClasses} font-semibold transition-all duration-300 focus:outline-none focus:ring-4 focus:ring-blue-500/50 rounded-full px-4 py-2 inline-flex items-center gap-2 shadow-sm hover:shadow-md`}
            title={`${tag.metadata.description} (${tag.count} post${tag.count > 1 ? 's' : ''})`}
          >
            <span>{tag.metadata.title}</span>
            <span class="text-xs md:text-sm opacity-70 font-medium">{tag.count}</span>
          </a>
        );
      })}
    </div>
  </section>

  <script>
    // Custom animation using Web Animations API with framer-motion-like easing
    const tags = document.querySelectorAll('.tag-item');

    if (tags.length > 0) {
      // Animate tags in with stagger
      tags.forEach((tag, index) => {
        const element = tag as HTMLElement;

        // Initial state
        element.style.opacity = '0';
        element.style.transform = 'scale(0.8)';

        // Staggered animation
        setTimeout(() => {
          element.animate(
            [
              {
                opacity: 0,
                transform: 'scale(0.8)',
                filter: 'blur(4px)'
              },
              {
                opacity: 1,
                transform: 'scale(1)',
                filter: 'blur(0px)'
              }
            ],
            {
              duration: 500,
              easing: 'cubic-bezier(0.22, 0.61, 0.36, 1)',
              fill: 'forwards'
            }
          );
        }, index * 30);

        // Hover animations
        let hoverAnimation: Animation | null = null;

        element.addEventListener('mouseenter', () => {
          if (hoverAnimation) hoverAnimation.cancel();
          hoverAnimation = element.animate(
            [
              { transform: 'scale(1) translateY(0)' },
              { transform: 'scale(1.15) translateY(-4px)' }
            ],
            {
              duration: 300,
              easing: 'cubic-bezier(0.34, 1.56, 0.64, 1)',
              fill: 'forwards'
            }
          );
        });

        element.addEventListener('mouseleave', () => {
          if (hoverAnimation) hoverAnimation.cancel();
          hoverAnimation = element.animate(
            [
              { transform: element.style.transform || 'scale(1.15) translateY(-4px)' },
              { transform: 'scale(1) translateY(0)' }
            ],
            {
              duration: 300,
              easing: 'cubic-bezier(0.22, 0.61, 0.36, 1)',
              fill: 'forwards'
            }
          );
        });

        // Click animations
        element.addEventListener('mousedown', () => {
          element.animate(
            [
              { transform: 'scale(1.15) translateY(-4px)' },
              { transform: 'scale(0.95) translateY(-4px)' }
            ],
            {
              duration: 100,
              easing: 'ease-out',
              fill: 'forwards'
            }
          );
        });

        element.addEventListener('mouseup', () => {
          element.animate(
            [
              { transform: 'scale(0.95) translateY(-4px)' },
              { transform: 'scale(1.15) translateY(-4px)' }
            ],
            {
              duration: 100,
              easing: 'ease-out',
              fill: 'forwards'
            }
          );
        });
      });
    }
  </script>
</BaseLayout>