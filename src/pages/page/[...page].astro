---
import { getCollection } from 'astro:content';
import { getImage } from 'astro:assets';
import BaseLayout from '../../layouts/BaseLayout.astro';
import PostCard from '../../components/blog/PostCard.astro';
import Pagination from '../../components/layout/Pagination.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../../consts';

export async function getStaticPaths({ paginate }) {
	const allPosts = (await getCollection('blog'))
		.filter(post => import.meta.env.DEV || !post.data.draft)
		.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

	return paginate(allPosts, { pageSize: 5 });
}

const { page } = Astro.props;

// Get first post hero image for LCP preload optimization
// Generate optimized AVIF at desktop size for fastest LCP
const firstPost = page.data[0];
const firstPostHeroImage = firstPost?.data.heroImage || firstPost?.data.cover?.image;
let optimizedHeroImage;
if (firstPostHeroImage) {
	optimizedHeroImage = await getImage({
		src: firstPostHeroImage,
		width: 728,
		format: 'avif',
		quality: 65
	});
}
---

<BaseLayout title={`${SITE_TITLE} - Page ${page.currentPage}`} description={SITE_DESCRIPTION}>
	{optimizedHeroImage && (
		<link
			slot="head"
			rel="preload"
			as="image"
			href={optimizedHeroImage.src}
			type="image/avif"
			fetchpriority="high"
		/>
	)}
	<section class="max-w-3xl mx-auto px-5">
		<ul class="space-y-12">
			{page.data.map((post, index) => (
				<li>
					<PostCard post={post} priority={index === 0} />
				</li>
			))}
			</ul>

			{page.total > page.size && (
				<Pagination
					currentPage={page.currentPage}
					totalPages={page.lastPage}
					getHref={(pageNum) => (pageNum === 1 ? '/' : `/page/${pageNum}/`)}
					hideIfSingle={false}
				/>
			)}
		</section>
</BaseLayout>
