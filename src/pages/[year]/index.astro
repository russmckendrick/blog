---
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import PostCard from '../../components/blog/PostCard.astro';
import Pagination from '../../components/layout/Pagination.astro';
import { SITE_TITLE } from '../../consts';

const postsPerPage = 10;

export async function getStaticPaths() {
	const allPosts = await getCollection('blog');
	const allTunes = await getCollection('tunes');
	const allContent = [...allPosts, ...allTunes];

	// Get unique years
	const years = [...new Set(allContent.map(item =>
		item.data.pubDate.getFullYear().toString()
	))];

	return years.map(year => {
		const yearContent = allContent
			.filter(item => (import.meta.env.DEV || !item.data.draft) && item.data.pubDate.getFullYear().toString() === year)
			.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

		return {
			params: { year },
			props: { year, totalItems: yearContent.length }
		};
	});
}

const { year, totalItems } = Astro.props;

// Get all posts and tunes for this year
const allPosts = await getCollection('blog');
const allTunes = await getCollection('tunes');
const allContent = [...allPosts, ...allTunes];

const yearContent = allContent
	.filter(item => (import.meta.env.DEV || !item.data.draft) && item.data.pubDate.getFullYear().toString() === year)
	.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf())
	.slice(0, postsPerPage);

const totalPages = Math.ceil(totalItems / postsPerPage);

const title = `${year} Archive - ${SITE_TITLE}`;
const description = `All posts and tunes from ${year}`;
---

<BaseLayout title={title} description={description}>
	<section class="max-w-3xl mx-auto px-5">
		<h1 class="text-4xl font-bold mb-8 text-gray-900 dark:text-gray-100">{year}</h1>
		<p class="text-gray-600 dark:text-gray-400 mb-8">
			{totalItems} {totalItems === 1 ? 'post' : 'posts'} published in {year}
		</p>

		<ul class="space-y-12">
			{yearContent.map((item, index) => (
				<li>
					<PostCard post={item} priority={index === 0} />
				</li>
			))}
		</ul>

		{totalPages > 1 && (
			<Pagination
				currentPage={1}
				totalPages={totalPages}
				getHref={(pageNum) => (pageNum === 1 ? `/${year}/` : `/${year}/page/${pageNum}/`)}
			/>
		)}
	</section>
</BaseLayout>
