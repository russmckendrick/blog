---
import BaseLayout from '../layouts/BaseLayout.astro';
import { ERROR_404 } from '../consts';
---

<BaseLayout title={ERROR_404.title} description={ERROR_404.description}>
	<!-- TV Static Background -->
	<canvas id="static" class="fixed inset-0 w-full h-full pointer-events-none opacity-30 dark:opacity-40" aria-hidden="true"></canvas>

	<section class="relative min-h-[80vh] flex items-center justify-center px-5">
		<div class="text-center max-w-2xl">
			<!-- Glitchy 404 -->
			<div class="mb-8">
				<h1 class="glitch text-9xl sm:text-[12rem] font-black text-gray-900 dark:text-gray-100" data-text="404">
					404
				</h1>
			</div>

			<!-- Main Message -->
			<div class="mb-12">
				<h2 class="text-4xl sm:text-5xl font-bold mb-6 text-gray-900 dark:text-gray-100 glitch-text">
					{ERROR_404.heading}
				</h2>
				<p class="text-xl text-gray-600 dark:text-gray-400 mb-3">
					{ERROR_404.message}
				</p>
				<p class="text-lg text-gray-500 dark:text-gray-500">
					{ERROR_404.submessage}
				</p>
			</div>

			<!-- Button -->
			<a
				href="/"
				class="glitch-button inline-flex items-center justify-center gap-3 px-8 py-4 border-2 border-blue-600 dark:border-blue-400 text-blue-600 dark:text-blue-400 hover:border-blue-500 dark:hover:border-blue-300 hover:text-blue-500 dark:hover:text-blue-300 text-lg rounded-lg transition-all font-semibold shadow-lg hover:shadow-blue-500/50"
			>
				<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
					<path d="M20 12H4"></path>
					<path d="M10 6L4 12l6 6"></path>
				</svg>
				Return Home
			</a>
		</div>
	</section>

	<style>
		/* Glitch Effect for 404 */
		.glitch {
			position: relative;
			letter-spacing: -0.05em;
			animation: glitch-skew 1s infinite linear alternate-reverse;
		}

		.glitch::before,
		.glitch::after {
			content: attr(data-text);
			position: absolute;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
		}

		.glitch::before {
			left: 2px;
			text-shadow: -2px 0 #ff00de;
			clip: rect(44px, 450px, 56px, 0);
			animation: glitch-anim 5s infinite linear alternate-reverse;
		}

		.glitch::after {
			left: -2px;
			text-shadow: -2px 0 #00fff9, 2px 2px #ff00de;
			animation: glitch-anim2 5s infinite linear alternate-reverse;
		}

		@keyframes glitch-anim {
			0% { clip: rect(31px, 9999px, 94px, 0); transform: skew(0.5deg); }
			20% { clip: rect(12px, 9999px, 85px, 0); transform: skew(0.3deg); }
			40% { clip: rect(54px, 9999px, 38px, 0); transform: skew(0.4deg); }
			60% { clip: rect(18px, 9999px, 76px, 0); transform: skew(0.3deg); }
			80% { clip: rect(72px, 9999px, 51px, 0); transform: skew(0.4deg); }
			100% { clip: rect(50px, 9999px, 22px, 0); transform: skew(0.8deg); }
		}

		@keyframes glitch-anim2 {
			0% { clip: rect(65px, 9999px, 100px, 0); transform: skew(0.3deg); }
			20% { clip: rect(59px, 9999px, 11px, 0); transform: skew(0.2deg); }
			40% { clip: rect(38px, 9999px, 92px, 0); transform: skew(0.8deg); }
			60% { clip: rect(96px, 9999px, 28px, 0); transform: skew(0.9deg); }
			80% { clip: rect(85px, 9999px, 42px, 0); transform: skew(0.5deg); }
			100% { clip: rect(91px, 9999px, 47px, 0); transform: skew(0.1deg); }
		}

		@keyframes glitch-skew {
			0% { transform: skew(0deg); }
			20% { transform: skew(1deg); }
			40% { transform: skew(-1deg); }
			60% { transform: skew(-3deg); }
			80% { transform: skew(1deg); }
			100% { transform: skew(0deg); }
		}

		/* Glitch text effect */
		.glitch-text {
			animation: glitch-text-anim 0.5s infinite;
		}

		@keyframes glitch-text-anim {
			0%, 100% { text-shadow: 0 0 0 transparent; }
			25% { text-shadow: -2px 0 0 rgba(255, 0, 222, 0.5), 2px 0 0 rgba(0, 255, 249, 0.5); }
			75% { text-shadow: 2px 0 0 rgba(255, 0, 222, 0.5), -2px 0 0 rgba(0, 255, 249, 0.5); }
		}

		/* Button hover effect */
		.glitch-button:hover {
			animation: glitch-button-anim 0.3s;
		}

		@keyframes glitch-button-anim {
			0%, 100% { transform: translate(0); }
			20% { transform: translate(-2px, 2px); }
			40% { transform: translate(2px, -2px); }
			60% { transform: translate(-2px, -2px); }
			80% { transform: translate(2px, 2px); }
		}
	</style>

	<script>
		const canvas = document.getElementById('static') as HTMLCanvasElement;
		const ctx = canvas.getContext('2d');

		if (ctx) {
			canvas.width = window.innerWidth;
			canvas.height = window.innerHeight;

			function drawStatic() {
				const imageData = ctx!.createImageData(canvas.width, canvas.height);
				for (let i = 0; i < imageData.data.length; i += 4) {
					const val = Math.random() * 255;
					imageData.data[i] = val;
					imageData.data[i + 1] = val;
					imageData.data[i + 2] = val;
					imageData.data[i + 3] = 255;
				}
				ctx!.putImageData(imageData, 0, 0);
				requestAnimationFrame(drawStatic);
			}

			drawStatic();

			window.addEventListener('resize', () => {
				canvas.width = window.innerWidth;
				canvas.height = window.innerHeight;
			});
		}
	</script>
</BaseLayout>
