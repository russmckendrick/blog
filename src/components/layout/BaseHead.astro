---
// Import the global.css file here so that it is included on
// all pages through the use of the <BaseHead /> component.
import '../../styles/global.css';
import { AstroSEO } from 'astro-seo-plugin';
import { SITE_TITLE, SITE_KEYWORDS } from '../../consts';

interface Props {
	title: string;
	description: string;
	image?: string;
	keywords?: string[];
	datePublished?: Date;
	dateModified?: Date;
	lastModified?: Date;
	author?: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

// Default fallback image (public URL)
const defaultImage = '/images/blog-cover.png';
const { title, description, image = defaultImage, keywords = SITE_KEYWORDS, datePublished, dateModified, lastModified, author } = Astro.props;

// Use lastModified if available, otherwise fall back to dateModified
const effectiveModifiedDate = lastModified || dateModified;

// Construct full image URL
// If image starts with http, use it as is, otherwise construct full URL
const imageURL = image?.startsWith('http')
	? image
	: new URL(image || defaultImage, Astro.site || Astro.url).toString();
---

<!-- Critical meta tags first -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />

<!-- AstroSEO Component for comprehensive SEO management -->
<AstroSEO
	title={title}
	description={description}
	canonical={canonicalURL.toString()}
	openGraph={{
		title: title,
		description: description,
		type: "website",
		url: Astro.url.toString(),
		image: imageURL,
		siteName: SITE_TITLE,
		locale: "en_GB"
	}}
	twitter={{
		card: "summary_large_image",
		site: "@russmckendrick",
		creator: "@russmckendrick",
		title: title,
		description: description,
		image: imageURL
	}}
	robots={{
		index: true,
		follow: true
	}}
	additionalMetaTags={[
		{ name: "keywords", content: keywords.join(', ') },
		{ name: "generator", content: Astro.generator },
		{ name: "theme-color", content: "#ffffff" },
		{ property: "og:image:width", content: "1200" },
		{ property: "og:image:height", content: "630" },
		{ property: "og:image:alt", content: title },
		...(datePublished ? [{ property: "article:published_time", content: datePublished.toISOString() }] : []),
		...(effectiveModifiedDate || datePublished ? [{ property: "article:modified_time", content: (effectiveModifiedDate || datePublished)!.toISOString() }] : []),
		...(author ? [{ property: "article:author", content: author }] : [])
	]}
	additionalLinkTags={[
		{ rel: "icon", type: "image/x-icon", href: "/favicon.ico" },
		{ rel: "icon", type: "image/png", sizes: "16x16", href: "/favicon-16x16.png" },
		{ rel: "icon", type: "image/png", sizes: "32x32", href: "/favicon-32x32.png" },
		{ rel: "apple-touch-icon", href: "/apple-touch-icon.png" },
		{ rel: "mask-icon", href: "/images/logo.svg" },
		{ rel: "sitemap", href: "/sitemap-index.xml" },
		{ rel: "alternate", type: "application/rss+xml", href: new URL('rss.xml', Astro.site).toString() },
		{ rel: "me", href: "https://social.mckendrick.io/@russ" }
	]}
/>

<!-- Preload critical self-hosted fonts -->
<link rel="preload" href="/fonts/inter-400-latin.woff2" as="font" type="font/woff2" crossorigin>
<link rel="preload" href="/fonts/inter-variable-latin.woff2" as="font" type="font/woff2" crossorigin>

<!-- DNS Prefetch for analytics -->
<link rel="dns-prefetch" href="https://plausible.io">
<link rel="preconnect" href="https://plausible.io" crossorigin>

<!-- Plausible Analytics - Load after page interactive -->
<script>
	if (document.readyState === 'complete') {
		loadPlausible();
	} else {
		window.addEventListener('load', loadPlausible);
	}
		function loadPlausible() {
			const script = document.createElement('script');
			script.defer = true;
			script.dataset.domain = 'russ.cloud';
			script.dataset.api = 'https://plausible.io/api/event';
			script.src = '/js/plausible.js';
			document.head.appendChild(script);
		}
	</script>

<!-- Critical CSS to ensure header is immediately visible -->
<style is:inline>
	.header-wrapper {
		opacity: 1 !important;
		visibility: visible !important;
		display: block !important;
	}
</style>

<!-- Theme initialization to prevent FOUC -->
<script is:inline>
	// Set theme immediately to prevent flash
	function applyThemeImmediately() {
		const isDark = localStorage.theme === 'dark' ||
			(!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches);

		document.documentElement.classList.toggle('dark', isDark);
		document.documentElement.setAttribute('data-theme', isDark ? 'dark' : 'light');
	}

	// Apply on initial load
	applyThemeImmediately();

	// Apply before View Transitions swap to prevent flicker
	document.addEventListener('astro:before-swap', (e) => {
		// Get theme from current page
		const isDark = document.documentElement.classList.contains('dark');

		// Apply to new page before swap
		e.newDocument.documentElement.classList.toggle('dark', isDark);
		e.newDocument.documentElement.setAttribute('data-theme', isDark ? 'dark' : 'light');
	});
</script>
