---
import { LightGallery } from 'astro-lightgallery'
import { getCFImageUrl, generateCFSrcSet } from '../../utils/cloudflare-images';

interface Props {
  src: string;
  alt?: string;
  width?: string;
  link?: string;
  zoom?: string | boolean;
  sizes?: string;
}

const { src, alt = '', width, link, zoom = true, sizes } = Astro.props;

// Check if src is external URL
const isExternal = src.startsWith('http://') || src.startsWith('https://');

// Determine if zoom should be enabled
const enableZoom = zoom === 'true' || zoom === true;

// For local images, use Cloudflare Image Transformations
// For gallery/zoom, use high quality (90)
const imgSrc = isExternal ? src : getCFImageUrl(src, { width: 1200, quality: 90, format: 'auto' });
const highResSrc = isExternal ? src : getCFImageUrl(src, { width: 2048, quality: 90, format: 'auto' });
const srcsetString = isExternal ? '' : generateCFSrcSet(src, [640, 1024, 1536, 2048], 90);
---

<div class="img-wrapper my-6 flex justify-center">
  {enableZoom ? (
    <div data-no-swup>
      <LightGallery
        layout={{ imgs: [{ src: highResSrc, alt: alt }] }}
        options={{ thumbnail: false, download: false }}
      >
        <a href={highResSrc}>
          <img
            src={imgSrc}
            srcset={srcsetString}
            alt={alt}
            loading="lazy"
            class="rounded-lg max-w-full h-auto hover:opacity-90 transition-opacity cursor-zoom-in"
            sizes={sizes || '(min-width: 35em) 1200px, 100vw'}
            {...(width && { width })}
          />
        </a>
      </LightGallery>
    </div>
  ) : link ? (
    <a href={link} target="_blank" rel="noopener noreferrer" data-no-swup>
      <img
        src={imgSrc}
        srcset={srcsetString}
        alt={alt}
        loading="lazy"
        class="rounded-lg max-w-full h-auto hover:opacity-90 transition-opacity"
        sizes={sizes || '(min-width: 35em) 1200px, 100vw'}
        {...(width && { width })}
      />
    </a>
  ) : (
    <img
      src={imgSrc}
      srcset={srcsetString}
      alt={alt}
      loading="lazy"
      class="rounded-lg max-w-full h-auto"
      sizes={sizes || '(min-width: 35em) 1200px, 100vw'}
      {...(width && { width })}
    />
  )}
</div>
