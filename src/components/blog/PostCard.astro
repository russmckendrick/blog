---
import type { CollectionEntry } from 'astro:content';
import FormattedDate from './FormattedDate.astro';
import { getPostUrl } from '../../utils/url.ts';
import { calculateReadingTime, formatReadingTime } from '../../utils/reading-time';
import { getTagUrl, getTagDisplayName, getTagColorClasses } from '../../utils/tags';
import { getCFImageUrl, generateCFSrcSet, CF_IMAGE_PRESETS } from '../../utils/cloudflare-images';
import { AI_AUTHOR, TAG_METADATA } from '../../consts';

interface Props {
	post: CollectionEntry<'blog'> | CollectionEntry<'tunes'>;
	priority?: boolean; // For LCP optimization on first card
	variant?: 'vertical' | 'horizontal'; // Layout variant
}

const { post, priority = false, variant = 'vertical' } = Astro.props;
const href = getPostUrl(post.data.pubDate, post.data.title);
const heroImage = post.data.heroImage || post.data.cover?.image;
const alt = post.data.cover?.alt || post.data.title;
const description = post.data.summary || post.data.description;
const minutes = calculateReadingTime(post.body);
const readingTime = formatReadingTime(minutes);
const author = post.data.author || AI_AUTHOR.name;
const tags = post.data.tags ?? [];

// Check if this is an AI-generated post
const isAIAuthor = author === AI_AUTHOR.name;

// Build avatar path
const buildAvatarPath = (avatarName: string | undefined) => {
	if (!avatarName) return null;
	if (avatarName.includes('.')) {
		return `/images/avatars/${avatarName}`;
	}
	return `/images/avatars/${avatarName}.svg`;
};

// Determine avatar source
const avatarSrc = post.data.avatar
	? buildAvatarPath(post.data.avatar)
	: (isAIAuthor ? AI_AUTHOR.avatar : '/images/avatar.svg');
const avatarFallback = '/images/avatar-192x192.png';

// Get the primary tag color for avatar glow
const primaryTag = tags[0];
const getAvatarGlowColor = () => {
	if (!primaryTag || !TAG_METADATA[primaryTag]) {
		return 'text-blue-600 dark:text-blue-400';
	}

	const tagColorLight = TAG_METADATA[primaryTag].colorLight;

	// Extract the text color class from tag metadata (e.g., "text-purple-700")
	const textColorMatch = tagColorLight.match(/text-(\w+)-(\d+)/);
	if (textColorMatch) {
		const [, color, shade] = textColorMatch;
		return `text-${color}-${shade} dark:text-${color}-400`;
	}

	return 'text-blue-600 dark:text-blue-400';
};

const avatarGlowColor = getAvatarGlowColor();
---

{variant === 'vertical' ? (
	<a
		href={href}
		aria-label={`Read blog post: ${post.data.title}`}
		class="group block focus:outline-none focus-visible:ring-4 focus-visible:ring-blue-500/60 focus-visible:ring-offset-[16px] focus-visible:ring-offset-gray-100 dark:focus-visible:ring-offset-gray-900 rounded-[28px]">
		<article
			class="relative bg-white/95 dark:bg-gray-900/70 border border-gray-200/60 dark:border-gray-700 rounded-[28px] shadow-lg dark:shadow-black/30 overflow-hidden transition-all duration-500 group-hover:-translate-y-[3px] group-hover:shadow-2xl">
				{heroImage && (
					<figure class="relative overflow-hidden">
						<img
							src={getCFImageUrl(heroImage, {
								width: priority ? 640 : 480,
								quality: priority ? 85 : 80,
								format: 'auto',
								fit: 'cover'
							})}
							srcset={generateCFSrcSet(
								heroImage,
								priority ? CF_IMAGE_PRESETS.thumbnailPriority.widths : CF_IMAGE_PRESETS.thumbnail.widths,
								priority ? 85 : 80
							)}
							sizes={priority ? "(min-width: 1024px) 640px, (min-width: 768px) 480px, (min-width: 640px) 640px, (min-width: 400px) 400px, 320px" : "(min-width: 1024px) 400px, (min-width: 640px) 480px, (min-width: 400px) 400px, 320px"}
							alt={alt}
							loading={priority ? "eager" : "lazy"}
							fetchpriority={priority ? "high" : "low"}
							class="w-full aspect-[16/9] sm:aspect-[5/2] min-h-[220px] object-cover transition-transform duration-700 group-hover:scale-[1.03]"
						/>
					</figure>
				)}
			<div class="relative p-6 md:p-8 flex flex-col gap-6">
				<header class="space-y-3">
					<h3 class="text-2xl font-semibold tracking-tight text-gray-900 dark:text-gray-100">
						{post.data.title}
					</h3>
				</header>
				{description && (
					<p class="text-base text-gray-600 dark:text-gray-300 leading-relaxed">
						{description}
					</p>
				)}
				<footer class="mt-1 text-sm flex flex-wrap items-center gap-x-2 gap-y-3">
					<div class="flex items-center gap-2">
						<div class="relative flex-shrink-0">
							<div class={`absolute -inset-0.5 bg-gradient-to-r from-current to-current rounded-full opacity-60 blur-sm will-change-transform ${avatarGlowColor}`}></div>
							<img
								src={avatarSrc}
								alt={author}
								class="relative w-10 h-10 sm:w-12 sm:h-12 rounded-full ring-2 ring-white dark:ring-gray-900 shadow-md object-cover"
								onError={`this.onerror=null; this.src='${avatarFallback}';`}
							/>
						</div>
						<div class="flex flex-col">
							<span class="text-gray-700 dark:text-gray-300 font-medium">{author}</span>
							<div class="flex items-center gap-2 text-xs text-gray-500 dark:text-gray-400">
								<span class="text-blue-600 dark:text-blue-400">
									<FormattedDate date={post.data.pubDate} />
								</span>
								{readingTime && (
									<>
										<span aria-hidden="true">·</span>
										<span>{readingTime}</span>
									</>
								)}
							</div>
						</div>
					</div>
					{tags.length > 0 && (
						<div class="flex flex-wrap gap-2 ml-auto">
							{tags.slice(0, 6).map((tag) => (
								<a
									href={getTagUrl(tag)}
									class={`inline-flex items-center rounded-full px-2 py-1 text-xs font-medium ${getTagColorClasses(tag)} transition-all hover:scale-105 hover:shadow-md focus:outline-none focus:ring-2 focus:ring-blue-500/50`}
									onclick="event.stopPropagation()"
								>
									{getTagDisplayName(tag)}
								</a>
							))}
						</div>
					)}
				</footer>
			</div>
		</article>
	</a>
) : (
	<a
		href={href}
		aria-label={`Read blog post: ${post.data.title}`}
		class="group block focus:outline-none focus-visible:ring-4 focus-visible:ring-blue-500/60 focus-visible:ring-offset-[16px] focus-visible:ring-offset-gray-100 dark:focus-visible:ring-offset-gray-900 rounded-2xl">
		<article
			class="relative bg-white/95 dark:bg-gray-900/70 border border-gray-200/60 dark:border-gray-700 rounded-2xl shadow-lg dark:shadow-black/30 overflow-hidden transition-all duration-500 group-hover:shadow-2xl">
			<div class="flex flex-col sm:flex-row">
				{heroImage && (
					<figure class="relative overflow-hidden sm:w-48 md:w-56 lg:w-64 flex-shrink-0">
						<img
							src={getCFImageUrl(heroImage, {
								width: 288,
								quality: 80,
								format: 'auto',
								fit: 'cover'
							})}
							srcset={generateCFSrcSet(heroImage, [192, 224, 256, 288], 80)}
							sizes="(min-width: 1024px) 256px, (min-width: 768px) 224px, (min-width: 640px) 192px, 92vw"
							alt={alt}
							loading="lazy"
							fetchpriority="low"
							class="w-full h-48 sm:h-full object-cover transition-transform duration-700 group-hover:scale-[1.03]"
						/>
					</figure>
				)}
				<div class="relative p-6 flex flex-col gap-3 flex-1 min-w-0">
					<header>
						<h3 class="text-xl font-semibold tracking-tight text-gray-900 dark:text-gray-100 line-clamp-2">
							{post.data.title}
						</h3>
					</header>
					{description && (
						<p class="text-sm text-gray-600 dark:text-gray-300 leading-relaxed line-clamp-2">
							{description}
						</p>
					)}
					<footer class="mt-auto text-xs flex items-center gap-2">
						<div class="relative flex-shrink-0">
							<div class={`absolute -inset-0.5 bg-gradient-to-r from-current to-current rounded-full opacity-60 blur-sm will-change-transform ${avatarGlowColor}`}></div>
							<img
								src={avatarSrc}
								alt={author}
								class="relative w-8 h-8 rounded-full ring-2 ring-white dark:ring-gray-900 shadow-md object-cover"
								onError={`this.onerror=null; this.src='${avatarFallback}';`}
							/>
						</div>
						<div class="flex flex-col">
							<span class="text-gray-700 dark:text-gray-300 font-medium text-xs">{author}</span>
							<div class="flex items-center gap-2 text-xs text-gray-500 dark:text-gray-400">
								<span class="text-blue-600 dark:text-blue-400">
									<FormattedDate date={post.data.pubDate} />
								</span>
								{readingTime && (
									<>
										<span aria-hidden="true">·</span>
										<span>{readingTime}</span>
									</>
								)}
							</div>
						</div>
					</footer>
				</div>
			</div>
		</article>
	</a>
)}
